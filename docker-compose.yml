services:
  # Traefik reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    container_name: vox-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/dynamic.yml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Uncomment for production with Let's Encrypt
      # - --certificatesresolvers.letsencrypt.acme.email=your-email@domain.com
      # - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - traefik-data:/data
    networks:
      - vox-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: vox-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-voxcanvas123}
    volumes:
      - redis-data:/data
    networks:
      - vox-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vox-backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # Temporary direct access for testing
    environment:
      - VOX_SESSION_ID=${VOX_SESSION_ID:-docker-session}
      - VOX_SESSION_TITLE=${VOX_SESSION_TITLE:-Docker Vox Canvas}
      - VOX_STT_MODE=${VOX_STT_MODE:-google}
      - VOX_LANGUAGE=${VOX_LANGUAGE:-ru-RU}
      - VOX_CARD_MODE=${VOX_CARD_MODE:-gemini}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - VOX_OPENAI_MODEL=${VOX_OPENAI_MODEL:-gpt-4o-mini}
      - VOX_GEMINI_MODEL=${VOX_GEMINI_MODEL:-gemini-1.5-flash}
      - VOX_TRACE=${VOX_TRACE:-false}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-voxcanvas123}@redis:6379/0
    volumes:
      # Mount credentials as volume for security
      - ./backend/google-credentials.json:/app/google-credentials.json:ro
      - backend-logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vox-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && (PathPrefix(`/api`) || PathPrefix(`/ws`))"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.priority=10"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vox-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - vox-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.priority=1"

volumes:
  traefik-data:
    driver: local
  redis-data:
    driver: local
  backend-logs:
    driver: local

networks:
  vox-network:
    driver: bridge